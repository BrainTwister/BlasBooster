#include "BlasBooster/BlasInterface/Blas.h"
#include "BlasBooster/BlasInterface/IntelMKL_SpBlas.h"
#include "BlasBooster/BlasInterface/BlasInterface_IntelMKL.h"

// The upper case name must be used, since the lower case one is
// only a macro defined in mkl_service.h and results in a seg-fault.
extern "C" void MKL_Set_Num_Threads(int nbThreads);

namespace BlasBooster {

void IntelMKL_set_num_threads(int nbThreads)
{
	::MKL_Set_Num_Threads(nbThreads);
}

{% for function in functions_blas %}
{{ function.return_value }} BlasInterface <IntelMKL, {{ function.name }}>::operator() (
    {%+ for argument in function.argument_list -%}
    {{ argument }}* v{{loop.index0}}{{ ", " if not loop.last }}
    {%- endfor %}) const
{
    return ::{{ function.name }}_(
        {%- for argument in function.argument_list -%}
            v{{loop.index0}}{{ ", " if not loop.last }}
        {%- endfor %});
}

{% endfor -%}

{% for function in functions_spblas %}
{{ function.return_value }} BlasInterface <IntelMKL, {{ function.name }}>::operator() (
    {%+ for argument in function.argument_list -%}
    {{ argument }}* v{{loop.index0}}{{ ", " if not loop.last }}
    {%- endfor %}) const
{
    return ::mkl_{{ function.name }}_(
        {%- for argument in function.argument_list -%}
            v{{loop.index0}}{{ ", " if not loop.last }}
        {%- endfor %});
}

{% endfor -%}

std::complex<float> BlasInterface<IntelMKL, cdotc>::operator() (
	const int *v1, const std::complex<float> *v2, const int *v3, const std::complex<float> *v4, const int *v5 ) const
{
	std::complex<float> result;
	::cdotc_(&result,v1,v2,v3,v4,v5);
	return result;
}

std::complex<float> BlasInterface<IntelMKL, cdotu>::operator() (
	const int *v1, const std::complex<float> *v2, const int *v3, const std::complex<float> *v4, const int *v5 ) const
{
	std::complex<float> result;
	::cdotu_(&result,v1,v2,v3,v4,v5);
	return result;
}

std::complex<double> BlasInterface<IntelMKL, zdotc>::operator() (
	const int *v1, const std::complex<double> *v2, const int *v3, const std::complex<double> *v4, const int *v5 ) const
{
	std::complex<double> result;
	::zdotc_(&result,v1,v2,v3,v4,v5);
	return result;
}

std::complex<double> BlasInterface<IntelMKL, zdotu>::operator() (
	const int *v1, const std::complex<double> *v2, const int *v3, const std::complex<double> *v4, const int *v5 ) const
{
	std::complex<double> result;
	::zdotu_(&result,v1,v2,v3,v4,v5);
	return result;
}

} // namespace BlasBooster

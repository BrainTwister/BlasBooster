#include "BlasBooster/BlasInterface/Blas.h"
#include "BlasBooster/BlasInterface/BlasInterface_OpenBLAS.h"

extern "C" void openblas_set_num_threads(int nbThreads);

namespace BlasBooster {

void openblas_set_num_threads(int nbThreads)
{
    ::openblas_set_num_threads(nbThreads);
}

{% for function in functions_blas %}
{{ function.return_value }} BlasInterface <OpenBLAS, {{ function.name }}>::operator() (
    {%+ for argument in function.argument_list -%}
    {{ argument }}* v{{loop.index0}}{{ ", " if not loop.last }}
    {%- endfor %}) const
{
    return ::{{ function.name }}_(
        {%- for argument in function.argument_list -%}
            v{{loop.index0}}{{ ", " if not loop.last }}
        {%- endfor %});
}

{% endfor -%}

std::complex<float> BlasInterface < OpenBLAS, cdotc >::operator() (
    const int *v1, const std::complex<float> *v2, const int *v3, const std::complex<float> *v4, const int *v5) const
{
    std::complex<float> result;
    ::cdotc_(&result,v1,v2,v3,v4,v5);
    return result;
}

std::complex<float> BlasInterface < OpenBLAS, cdotu >::operator() (
    const int *v1, const std::complex<float> *v2, const int *v3, const std::complex<float> *v4, const int *v5) const
{
    std::complex<float> result;
    ::cdotu_(&result,v1,v2,v3,v4,v5);
    return result;
}

std::complex<double> BlasInterface < OpenBLAS, zdotc >::operator() (
    const int *v1, const std::complex<double> *v2, const int *v3, const std::complex<double> *v4, const int *v5) const
{
    std::complex<double> result;
    ::zdotc_(&result,v1,v2,v3,v4,v5);
    return result;
}

std::complex<double> BlasInterface < OpenBLAS, zdotu >::operator() (
    const int *v1, const std::complex<double> *v2, const int *v3, const std::complex<double> *v4, const int *v5) const
{
    std::complex<double> result;
    ::zdotu_(&result,v1,v2,v3,v4,v5);
    return result;
}

} // namespace BlasBooster
